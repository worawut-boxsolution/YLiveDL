@page "/DownloadLive"
@inject YouTubeLiveDownloadService DownloadService
@using System.Diagnostics
@using YoutubeExplode.Videos
@using YLiveDL.Util
<style>
    .container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
    }

    .input-group {
        margin-bottom: 20px;
    }

    .status-card {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .progress-container {
        height: 20px;
        background-color: #e9ecef;
        border-radius: 4px;
        margin: 15px 0;
        overflow: hidden;
    }

    .progress-bar {
        height: 100%;
        background-color: #28a745;
        transition: width 0.3s ease;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 4px;
        cursor: pointer;
    }

        .btn-primary:disabled {
            background-color: #6c757d;
            cursor: not-allowed;
        }

    .btn-danger {
        background-color: #dc3545;
        color: white;
    }

    .stream-info {
        display: flex;
        margin-bottom: 20px;
    }

    .thumbnail {
        width: 120px;
        height: 90px;
        object-fit: cover;
        border-radius: 4px;
        margin-right: 15px;
    }

    .alert {
        padding: 15px;
        border-radius: 4px;
        margin-bottom: 20px;
    }

    .alert-warning {
        background-color: #fff3cd;
        border-left: 4px solid #ffc107;
    }

    .alert-danger {
        background-color: #f8d7da;
        border-left: 4px solid #dc3545;
    }

    .alert-success {
        background-color: #d4edda;
        border-left: 4px solid #28a745;
    }
</style>

<div class="container">
    <h1>YouTube Live Downloader</h1>

    <div class="input-group">
        <input type="text"
               class="form-control"
               placeholder="วางลิงก์ YouTube Live ที่นี่"
               @bind="liveUrl"
               @onkeypress="HandleKeyPress" />
        <div class="input-group-append">
            <button class="btn-primary"
                    @onclick="StartDownload"
                    disabled="@(isDownloading || string.IsNullOrWhiteSpace(liveUrl))">
                @downloadButtonText
            </button>
            <button class="btn-danger"
                    @onclick="CancelDownload"
                    disabled="@(!isDownloading)">
                ยกเลิก
            </button>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            <h4>เกิดข้อผิดพลาด</h4>
            <p>@errorMessage</p>
        </div>
    }

    @if (!string.IsNullOrEmpty(warningMessage))
    {
        <div class="alert alert-warning">
            <h4>คำเตือน</h4>
            <p>@warningMessage</p>
        </div>
    }

    @if (isDownloading)
    {
        <div class="status-card">
            <h3>สถานะการดาวน์โหลด</h3>

            @if (!string.IsNullOrEmpty(videoTitle))
            {
                <div class="stream-info">
                    @if (!string.IsNullOrEmpty(thumbnailUrl))
                    {
                        <img src="@thumbnailUrl" class="thumbnail" />
                    }
                    <div>
                        <h4>@videoTitle</h4>
                        <p>@(isLive ? "สตรีมสด" : "วิดีโอปกติ")</p>
                        <p>ผู้สร้าง: @author</p>
                    </div>
                </div>
            }

            <div class="progress-container">
                <div class="progress-bar" style="width: @progressPercentage%"></div>
            </div>

            <div>
                <p><strong>ความคืบหน้า:</strong> @progressPercentage.ToString("0.00")%</p>
                <p><strong>สถานะ:</strong> @statusMessage</p>
                <p><strong>ความเร็ว:</strong> @downloadSpeed</p>
                <p><strong>ดาวน์โหลดแล้ว:</strong> @downloadedSize</p>
                <p><strong>เวลาที่เหลือ:</strong> @timeRemaining</p>
            </div>

            @if (isMerging)
            {
                <div style="margin-top: 20px; padding-top: 20px; border-top: 1px solid #dee2e6;">
                    <h4>สถานะการรวมไฟล์</h4>
                    <p>@mergeStatus</p>
                    @if (!string.IsNullOrEmpty(mergeTime))
                    {
                        <p>เวลา: @mergeTime</p>
                    }
                </div>
            }
        </div>
    }
    else if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success">
            <h4>สำเร็จ!</h4>
            <p>@successMessage</p>
            @if (!string.IsNullOrEmpty(outputPath))
            {
                <p>ไฟล์ถูกบันทึกที่: @outputPath</p>
            }
        </div>
    }
</div>

@code {
    // ตัวแปรสถานะ
    private string liveUrl = "";
    private string videoTitle = "";
    private string thumbnailUrl = "";
    private string author = "";
    private bool isLive = false;
    private string statusMessage = "รอเริ่มการดาวน์โหลด";
    private string errorMessage = "";
    private string warningMessage = "";
    private string successMessage = "";
    private double progressPercentage = 0;
    private string downloadSpeed = "0 KB/s";
    private string downloadedSize = "0 MB";
    private string timeRemaining = "--:--:--";
    private bool isDownloading = false;
    private bool isMerging = false;
    private string downloadButtonText = "ดาวน์โหลด";
    private string outputPath = "";
    private string mergeStatus = "";
    private string mergeTime = "";

    private CancellationTokenSource cancellationTokenSource;

    // เริ่มการดาวน์โหลด
    private async Task StartDownload()
    {
        try
        {
            ResetStatus();
            isDownloading = true;
            downloadButtonText = "กำลังดาวน์โหลด...";
            cancellationTokenSource = new CancellationTokenSource();

            // ดึงข้อมูลวิดีโอ
            statusMessage = "กำลังตรวจสอบสตรีม...";
            StateHasChanged();

            var videoInfo = await DownloadService.GetVideoInfoAsync(liveUrl);
            videoTitle = videoInfo.Title;
            thumbnailUrl = videoInfo.ThumbnailUrl;
            author = videoInfo.Author;
            isLive = videoInfo.IsLive;

            if (!isLive)
            {
                warningMessage = "นี่ไม่ใช่สตรีมสด แต่จะพยายามดาวน์โหลดเป็นวิดีโอปกติ";
            }

            // สร้าง Progress reporter
            var progress = new Progress<double>(p =>
            {
                progressPercentage = p * 100;
                UpdateDownloadStats(videoInfo.FileSize);
                StateHasChanged();
            });

            // กำหนดชื่อไฟล์
            var fileName = $"{videoTitle}.mp4".ReplaceInvalidFileNameChars("_");
            outputPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyVideos), fileName);

            // เริ่มดาวน์โหลด
            statusMessage = "กำลังเตรียมการดาวน์โหลด...";
            StateHasChanged();

            await DownloadService.DownloadLiveStreamAsync(
                liveUrl,
                outputPath,
                progress,
                cancellationTokenSource.Token);

            successMessage = "ดาวน์โหลดเสร็จสมบูรณ์!";
        }
        catch (OperationCanceledException)
        {
            statusMessage = "การดาวน์โหลดถูกยกเลิก";
        }
        catch (Exception ex)
        {
            errorMessage = $"เกิดข้อผิดพลาด: {ex.Message}";
            Console.WriteLine($"Error: {ex}");
        }
        finally
        {
            isDownloading = false;
            isMerging = false;
            downloadButtonText = "ดาวน์โหลด";
            StateHasChanged();
            cancellationTokenSource?.Dispose();
        }
    }

    // ยกเลิกการดาวน์โหลด
    private void CancelDownload()
    {
        statusMessage = "กำลังยกเลิก...";
        cancellationTokenSource?.Cancel();
        StateHasChanged();
    }

    // รีเซ็ตสถานะทั้งหมด
    private void ResetStatus()
    {
        progressPercentage = 0;
        downloadSpeed = "0 KB/s";
        downloadedSize = "0 MB";
        timeRemaining = "--:--:--";
        errorMessage = "";
        warningMessage = "";
        successMessage = "";
        statusMessage = "รอเริ่มการดาวน์โหลด";
        mergeStatus = "";
        mergeTime = "";
    }

    // อัปเดตสถิติการดาวน์โหลด
    private void UpdateDownloadStats(long totalSize)
    {
        var currentBytes = (long)(progressPercentage / 100 * totalSize);
        downloadedSize = FormatBytes(currentBytes);

        // คำนวณความเร็ว (ตัวอย่างง่ายๆ)
        if (progressPercentage > 0)
        {
            var elapsedSeconds = (DateTime.Now - downloadStartTime).TotalSeconds;
            var speed = currentBytes / elapsedSeconds;
            downloadSpeed = $"{FormatBytes((long)speed)}/s";

            // คำนวณเวลาที่เหลือ
            if (speed > 0)
            {
                var remainingBytes = totalSize - currentBytes;
                var remainingTime = TimeSpan.FromSeconds(remainingBytes / speed);
                timeRemaining = remainingTime.ToString(@"hh\:mm\:ss");
            }
        }
    }

    // จัดรูปแบบขนาดไฟล์
    private string FormatBytes(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        int order = 0;
        double len = bytes;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len /= 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }

    private DateTime downloadStartTime;

    // ตรวจสอบการกดปุ่ม Enter
    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            StartDownload();
        }
    }
}