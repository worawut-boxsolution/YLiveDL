@page "/Downloadlive"
@using Newtonsoft.Json.Linq
@using YLiveDL.Util
@using System.IO  
@inject YtDlpServiceLive YouTubeDownloader
@inject IJSRuntime JSRuntime

<PageTitle>ดาวน์โหลดวิดีโอ Live</PageTitle>

<h1>YouTube Live Video Downloader</h1>

<div class="input-group mb-3">
    <input type="text" class="form-control" placeholder="วางลิงก์ YouTube Live ที่นี่"
           @bind="videoUrl"
           @onkeyup="HandleKeyPress"
           disabled="@isDownloading" />
    <button class="btn btn-primary" @onclick="StartDownload" disabled="@(isDownloading || string.IsNullOrWhiteSpace(videoUrl))">
        @downloadButtonText
    </button>
    @if (isDownloading)
    {
        <button class="btn btn-danger" @onclick="CancelDownload">
            ยกเลิก
        </button>
    }
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

@if (video != null)
{
    <div class="card mb-3">
        <div class="row g-0">
            <div class="col-md-4">
                @if (!string.IsNullOrEmpty(video.ThumbnailUrl))
                {
                    <img src="@video.ThumbnailUrl" class="img-fluid rounded-start" alt="Video Thumbnail" />
                }
            </div>
            <div class="col-md-8">
                <div class="card-body">
                    <h5 class="card-title">@video.Title</h5>
                    <p class="card-text"><small class="text-muted">ผู้สร้าง: @video.Author</small></p>
                    <p class="card-text">ระยะเวลา: @video.Duration</p>
                    <p class="card-text">เป็นไลฟ์สตรีม: @(video.IsLiveStream ? "ใช่" : "ไม่ใช่")</p>
                </div>
            </div>
        </div>
    </div>
}

@if (isDownloading)
{
    <div class="mb-3">
        <label for="downloadProgress" class="form-label">ความคืบหน้าการดาวน์โหลด:</label>
        <div class="progress">
            <div class="progress-bar" role="progressbar"
                 style="width: @((int)(progressInfo.Percentage * 100))%;"
                 aria-valuenow="@((int)(progressInfo.Percentage * 100))"
                 aria-valuemin="0" aria-valuemax="100">
                @((int)(progressInfo.Percentage * 100))%
            </div>
        </div>
    </div>

    <div class="card card-body">
        <p><strong>สถานะ:</strong> @progressInfo.CurrentStatusMessage</p>
        @if (!progressInfo.IsMerging) // แสดงข้อมูลดาวน์โหลดปกติเมื่อยังไม่เข้าสู่ขั้นตอน Merge
        {
            <p><strong>ความเร็ว:</strong> @(string.IsNullOrEmpty(progressInfo.Speed) ? "N/A" : progressInfo.Speed)</p>
            <p><strong>ดาวน์โหลดแล้ว:</strong> @(string.IsNullOrEmpty(progressInfo.TotalSize) ? "N/A" : $"ประมาณ {((int)(progressInfo.Percentage * 100))}% ของ {progressInfo.TotalSize}")</p>
            <p><strong>เวลาที่เหลือ:</strong> @(string.IsNullOrEmpty(progressInfo.Eta) ? "N/A" : progressInfo.Eta)</p>
        }
        else // แสดงข้อมูลการ Merge เมื่อเข้าสู่ขั้นตอน Merge
        {
            <p><strong>สถานะการรวมไฟล์:</strong> @progressInfo.CurrentStatusMessage</p>
            @if (!string.IsNullOrEmpty(progressInfo.MergeTime))
            {
                <p><strong>เวลาวิดีโอ (ถ้ามี):</strong> @progressInfo.MergeTime</p>
            }
        }
    </div>
}

@code {
    private string videoUrl;
    private VideoInfoLive video;
    private bool isDownloading = false;
    private string errorMessage;
    private string downloadButtonText = "ดาวน์โหลด";
    private CancellationTokenSource cancellationTokenSource;
    private YtDlpProgressInfo progressInfo = new YtDlpProgressInfo();

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await StartDownload();
        }
    }

    private async Task StartDownload()
    {
        errorMessage = ""; // Clear previous errors
        if (string.IsNullOrWhiteSpace(videoUrl))
        {
            errorMessage = "โปรดระบุลิงก์ YouTube ก่อนดาวน์โหลด";
            return;
        }

        // Basic URL validation (can be more robust)
        if (!Uri.TryCreate(videoUrl, UriKind.Absolute, out var uriResult) ||
            // Corrected URL validation for YouTube hosts:
            !(uriResult.Host.Contains("youtube.com") || uriResult.Host.Contains("youtu.be")))
        {
            errorMessage = "โปรดระบุลิงก์ YouTube ที่ถูกต้อง (เช่น https://www.youtube.com/watch?v=xxxxxx หรือ https://youtu.be/xxxxxx)";
            return;
        }

        isDownloading = true;
        downloadButtonText = "กำลังดาวน์โหลด...";
        cancellationTokenSource = new CancellationTokenSource();
        progressInfo = new YtDlpProgressInfo(); // Reset progress info for new download
        StateHasChanged(); // Update UI to show "Downloading..."

        try
        {
            // Step 1: Get Video Metadata
            progressInfo.CurrentStatusMessage = "กำลังดึงข้อมูลวิดีโอ...";
            StateHasChanged(); // Update UI for status message

            var videoMetadata = await YouTubeDownloader.GetVideoMetadataAsync(videoUrl, cancellationTokenSource.Token);

            video = new VideoInfoLive
                {
                    Url = videoUrl,
                    Title = videoMetadata["title"]?.ToString() ?? "ไม่พบชื่อ",
                    Author = videoMetadata["uploader"]?.ToString() ?? "ไม่ทราบ",
                    // IsLiveStream = videoMetadata["is_live"]?.Value<bool>() ?? false,
                    IsLiveStream = (videoMetadata["is_live"] as JValue)?.Value<bool>() ?? false,
                    ThumbnailUrl = videoMetadata["thumbnail"]?.ToString()
                };

            // Handle Duration for live streams vs. regular videos
            var durationSeconds = videoMetadata["duration"]?.Value<double?>();
            if (video.IsLiveStream)
            {
                video.Duration = "LIVE"; // Or "N/A"
            }
            else if (durationSeconds.HasValue)
            {
                video.Duration = TimeSpan.FromSeconds(durationSeconds.Value).ToString(@"hh\:mm\:ss");
            }
            else
            {
                video.Duration = "ไม่ทราบ"; // Fallback for regular videos without duration
            }

            StateHasChanged(); // Update UI with video info

            // Step 2: Prepare Output Path (for .NET MAUI / Desktop)
            // This is crucial for where the downloaded file will be saved.
            // For MAUI, Environment.SpecialFolder.MyVideos is usually a good choice.
            var downloadsPath = Environment.GetFolderPath(Environment.SpecialFolder.MyVideos);
            if (!Directory.Exists(downloadsPath))
            {
                Directory.CreateDirectory(downloadsPath);
            }

            // Clean up title for filename (remove invalid characters)
            var cleanTitle = SanitizeFileName(video.Title);
            var outputPath = Path.Combine(downloadsPath, $"{cleanTitle}.mp4");

            // Check and Request Storage Permission for Android
#if ANDROID
        await CheckAndRequestStoragePermission();
#endif

            // Step 3: Download Video
            var progressReporter = new Progress<YtDlpProgressInfo>(p =>
            {
                progressInfo = p;
                StateHasChanged(); // Update UI on progress change
            });

            await YouTubeDownloader.DownloadVideoAsync(videoUrl, outputPath, progressReporter, cancellationTokenSource.Token);

            // Download Complete
            progressInfo.CurrentStatusMessage = "ดาวน์โหลดเสร็จสิ้น!";
            progressInfo.Percentage = 1.0; // Ensure 100% on completion
            downloadButtonText = "ดาวน์โหลดเสร็จสิ้น";
            isDownloading = false; // Allow new downloads
            StateHasChanged();

            // Optionally, show a success message or open the folder
            await JSRuntime.InvokeVoidAsync("alert", $"ดาวน์โหลด '{video.Title}' เสร็จสิ้นแล้ว! ไฟล์อยู่ที่: {outputPath}");

        }
        catch (OperationCanceledException)
        {
            errorMessage = "การดาวน์โหลดถูกยกเลิก.";
            progressInfo.CurrentStatusMessage = "การดาวน์โหลดถูกยกเลิก.";
            isDownloading = false;
            downloadButtonText = "ดาวน์โหลด";
        }
        catch (Exception ex)
        {
            // Log the full exception for debugging
            Console.WriteLine($"Error during download: {ex.Message}");
            Console.WriteLine($"Stack Trace: {ex.StackTrace}");

            errorMessage = $"เกิดข้อผิดพลาด: {ex.Message}";
            progressInfo.CurrentStatusMessage = $"เกิดข้อผิดพลาด: {ex.Message}";
            isDownloading = false;
            downloadButtonText = "ดาวน์โหลด";
        }
        finally
        {
            cancellationTokenSource?.Dispose();
            StateHasChanged(); // Ensure UI updates even on error/cancel
        }
    }

    private void CancelDownload()
    {
        cancellationTokenSource?.Cancel();
    }

    // Helper to sanitize filename
    private string SanitizeFileName(string fileName)
    {
        foreach (char c in Path.GetInvalidFileNameChars())
        {
            fileName = fileName.Replace(c, '_');
        }
        // Optional: Also remove invalid path characters if the full path uses them
        foreach (char c in Path.GetInvalidPathChars())
        {
            fileName = fileName.Replace(c, '_');
        }
        // Limit filename length to prevent issues on some file systems (e.g., 255 chars)
        if (fileName.Length > 200) // Keep some room for extension and potential numbering
        {
            fileName = fileName.Substring(0, 200);
        }
        return fileName;
    }

    // Android specific permission request
#if ANDROID
    private async Task CheckAndRequestStoragePermission()
    {
    // For Android 11+ (API 30+), StorageWrite permission might not be sufficient for app-specific directories.
    // It's recommended to save to app-specific external storage.
    // Environment.SpecialFolder.MyVideos usually points to a shared directory.
    // You might need to adjust the save path for Android if you encounter permission issues.
    // However, if it works for your target Android versions, this is fine.

    var status = await Permissions.CheckStatusAsync<Permissions.StorageWrite>();

    if (status == PermissionStatus.Granted)
        {
    return;
    }

    if (status == PermissionStatus.Denied && Permissions.ShouldShowRationale<Permissions.StorageWrite>())
        {
        var result = await Application.Current.MainPage.DisplayAlert("ต้องการสิทธิ์", "แอปพลิเคชันต้องการสิทธิ์ในการเข้าถึงที่จัดเก็บข้อมูลเพื่อบันทึกวิดีโอ", "ตกลง", "ยกเลิก");
        if (!result)
            {
            throw new Exception("ไม่ได้รับสิทธิ์ในการจัดเก็บข้อมูล (ผู้ใช้ปฏิเสธ)");
    }
    }

    status = await Permissions.RequestAsync<Permissions.StorageWrite>();

    if (status != PermissionStatus.Granted)
        {
        throw new Exception("ไม่ได้รับสิทธิ์ในการจัดเก็บข้อมูล (สิทธิ์ถูกปฏิเสธ)");
        }
    }
#endif
}